"""reset initial schema

Revision ID: 25be811d39e6
Revises:
Create Date: 2025-06-23 00:48:00.485785

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '25be811d39e6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='MMIW'
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=40), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username'),
    schema='MMIW'
    )
    op.create_table('follows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('follower_id', sa.Integer(), nullable=False),
    sa.Column('followed_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['followed_id'], ['MMIW.users.id'], ),
    sa.ForeignKeyConstraint(['follower_id'], ['MMIW.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='MMIW'
    )
    op.create_table('stories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('country', sa.String(length=100), nullable=False),
    sa.Column('state_or_region', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=100), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['MMIW.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='MMIW'
    )
    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('story_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['story_id'], ['MMIW.stories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['MMIW.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='MMIW'
    )
    op.create_table('photos',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('story_id', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['story_id'], ['MMIW.stories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['MMIW.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='MMIW'
    )
    op.execute('DROP TABLE IF EXISTS follows CASCADE')
    op.execute('DROP TABLE IF EXISTS tags CASCADE')
    op.execute('DROP TABLE IF EXISTS stories CASCADE')
    op.execute('DROP TABLE IF EXISTS comments CASCADE')
    op.execute('DROP TABLE IF EXISTS photos CASCADE')
    op.execute('DROP TABLE IF EXISTS users CASCADE')

    # Drop constraints only if story_tags exists (avoid crash if table is missing)
    op.execute("""
    DO $$
    BEGIN
        IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name='story_tags') THEN
            BEGIN
                ALTER TABLE story_tags DROP CONSTRAINT IF EXISTS story_tags_story_id_fkey;
                ALTER TABLE story_tags DROP CONSTRAINT IF EXISTS story_tags_tag_id_fkey;
            EXCEPTION
                WHEN undefined_table THEN NULL;
            END;
        END IF;
    END$$;
    """)

    with op.batch_alter_table('story_tags', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'tags', ['tag_id'], ['id'], referent_schema='MMIW')
        batch_op.create_foreign_key(None, 'stories', ['story_id'], ['id'], referent_schema='MMIW')


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('story_tags', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('story_tags_tag_id_fkey', 'tags', ['tag_id'], ['id'])
        batch_op.create_foreign_key('story_tags_story_id_fkey', 'stories', ['story_id'], ['id'])

    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('username', name='users_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('photos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('story_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['story_id'], ['stories.id'], name='photos_story_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='photos_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='photos_pkey')
    )
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('story_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['story_id'], ['stories.id'], name='comments_story_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='comments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.create_table('stories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('state_or_region', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='stories_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stories_pkey')
    )
    op.create_table('tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tags_pkey'),
    sa.UniqueConstraint('name', name='tags_name_key')
    )
    op.create_table('follows',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('follower_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('followed_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], name='follows_followed_id_fkey'),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], name='follows_follower_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='follows_pkey')
    )
    op.drop_table('photos', schema='MMIW')
    op.drop_table('comments', schema='MMIW')
    op.drop_table('stories', schema='MMIW')
    op.drop_table('follows', schema='MMIW')
    op.drop_table('users', schema='MMIW')
    op.drop_table('tags', schema='MMIW')
    # ### end Alembic commands ###
